from django.shortcuts import render
from . models import reg,scam,feedback,file,Check
import re
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from colorama import Fore
from urllib.parse import urlparse
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.naive_bayes import GaussianNB
from tld import get_tld, is_tld
# Create your views here.
# def index(request):
#     if request.method =='POST':
#       url = request.POST.get('link') 
#       scam(urls=url).save()
#       return render(request,'register.html')
#     else:
#       return render(request,'index.html')
  
def index(request):
    return render(request,'index.html')
def logout(request):
    return render(request,'index.html')
       

def register(request):
    if request.method == 'POST':
        fullname = request.POST.get('sfname')
        mail1 = request.POST.get('smail')
        password = request.POST.get('spass')
        
        # Check if the fullname already exists in the reg table
        if reg.objects.filter(fullname=fullname).exists():
            error_message = "This username is already taken. Please choose another name."
            return render(request, 'register.html', {'error_message': error_message})
        else:
            # If the fullname is not already taken, save the new entry
            reg(fullname=fullname, mail=mail1, password=password).save()
            return render(request, 'login.html')
    else:
        return render(request, 'register.html')

def login(request):
    if request.method=='POST':
        fullname = request.POST.get('sfname')
        password = request.POST.get('spass')
        cr = reg.objects.filter(fullname=fullname, password=password)
        if cr:
            userd=reg.objects.get(fullname=fullname,password=password)
            id=userd.id
            fullname=userd.fullname
            password=userd.password
            request.session['fullname']=fullname
            return render(request,'home.html')
        else:
         return render(request,'login.html')
    else:
       return render(request,'login.html')
    
def url_list(request):
        data=scam.objects.all() 
        return render(request,'url_list.html',{'DATA':data})


def result(request):
     return render(request,'result.html')    

def gpt(request):
     return render(request,'gpt.html')

def feedbackkk(request):
  if request.method =='POST':
       name = request.POST.get('fname')
       mail1 = request.POST.get('fmail')
       phone1 = request.POST.get('fphone')
       message1 = request.POST.get('fmessage')
       feedback(Name=name,Mail=mail1,Phone=phone1,Message=message1).save()
       return render(request,'home.html')
  else:
       return render(request,'home.html')
  
def feedbackk(request):
  if request.method =='POST':
       name = request.POST.get('fname')
       mail1 = request.POST.get('fmail')
       phone1 = request.POST.get('fphone')
       message1 = request.POST.get('fmessage')
       feedback(Name=name,Mail=mail1,Phone=phone1,Message=message1).save()
       return render(request,'index.html')
  else:
       return render(request,'index.html')

def home(request):
    return render(request,'home.html')

def fileupload(request):
     if request.method =='POST':
         files=request.FILES['files']
         file(img=files).save()
         return render(request,'home.html')
     else:
         return render(request,'file.html')

def profile(request):
    fullname=request.session['fullname']
    cr=reg.objects.get(fullname=fullname)
    if cr:
        user_info={

          'username':cr.fullname,
          'email':cr.mail,
          'password':cr.password,
          }
        return render(request, 'profile.html',user_info)
    else:
        return render(request,'profile.html')
    
def update(request):
    fullname=request.session['fullname']
    cr=reg.objects.get(fullname=fullname)
    if cr:
        user_info={

          'username':cr.fullname,
          'email':cr.mail,
          'password':cr.password,
          }
        return render(request, 'update.html',user_info)
    else:
        return render(request,'update.html')
    
def proupdate(request):
    fullname=request.session['fullname']
    if request.method=="POST":
     name=request.POST.get('sfname')
     password=request.POST.get('spass')
     email=request.POST.get('smail')
     data=reg.objects.get(fullname=fullname)
     data.fullname=name
     data.password=password
     data.mail=email
     data.save()
     return render(request,'home.html')
    else:
        return render(request,'update.html')
def get_scan_results(sha256_hash, api_key):
    # Define the VirusTotal API endpoint for file reports
    api_url = 'https://www.virustotal.com/vtapi/v2/file/report'

    # Parameters for the API request
    params = {'apikey': api_key, 'resource': sha256_hash}

    # Send request to VirusTotal API to retrieve file report
    response = requests.get(api_url, params=params)

    # Check if request was successful (status code 200)
    if response.status_code == 200:
        # Parse JSON response
        report = response.json()
        
        # Check if the file has been scanned before
        if report['response_code'] == 1:
            # Extract scan results
            results = []
            for scanner, result in report['scans'].items():
                results.append({'scanner': scanner, 'result': result['result']})
                
            return results
        else:
            return None
    else:
        # Error handling
        return None



import requests
from django.shortcuts import render
from django.http import HttpResponse

def upload_file(request):
    if request.method == 'POST' and request.FILES['file']:
        file = request.FILES['file']

        # VirusTotal API endpoint
        url = 'https://www.virustotal.com/vtapi/v2/file/scan'

        # Your VirusTotal API key
        api_key = '6371a1401a52fb1d0d1e66e7bfc67ab1eaa3cc8b9443e4bf861e4f69e2a1fe6e'

        # Parameters for the API request
        params = {'apikey': api_key}
        api_url = 'https://www.virustotal.com/vtapi/v2/file/report'

        # Files to upload
        files = {'file': file.read()}

        # Send file to VirusTotal for scanning
        response = requests.post(url, files=files, params=params)

        if response.status_code == 200:
            # Scan request successful
            scan_results = response.json()
            link = scan_results['sha256']
            print('link', link)
            
            # The SHA256 hash of the file you want to retrieve the report for
            sha256_hash = link

            # Parameters for the API request
            params = {'apikey': api_key, 'resource': sha256_hash}

            # Send request to VirusTotal API to retrieve file report
            response = requests.get(api_url, params=params)

            # Check if request was successful (status code 200)
            if response.status_code == 200:
                # Parse JSON response
                report = response.json()

                # Initialize results variable
                results = []

                # Check if the file has been scanned before
                if report['response_code'] == 1:
                    # Print detection results
                    print('Scan results for file:', report['resource'])
                    results = [{'scanner': scanner, 'result': result['result']} 
                               for scanner, result in report['scans'].items()]
                else:
                    print('File has not been scanned before')

                # Display scan results
                return render(request, 'scan_results.html', {'results': results})
            else:
                # Error handling
                return HttpResponse('Error occurred while scanning the file.')

    # Handle GET request (display file upload form)
    return render(request, 'upload_form.html')
key="1ccoiAdXjhPLKzq83pmev7bb9mLK6rxt"
link='https://www.ipqualityscore.com/api/json/url/'+key
import requests
from requests.exceptions import HTTPError

def urlcheck(request):
         if request.method=='POST':
            url=request.POST.get('url')
            response=requests.get(link+'/'+url)
            response.raise_for_status()
    # access JSOn content
            jsonResponse = response.json()
#print(jsonResponse)
            print('domain name is',jsonResponse['domain'])
            print('ip address is',jsonResponse['ip_address'])
            print('Malware Contents:',jsonResponse['malware'])
            print('Phishing Attack:',jsonResponse['phishing'])
            print('Age of Domain',jsonResponse['domain_age'])
            print('Category Of Website:',jsonResponse['category'])
            domain=jsonResponse['domain']
            ipaddress=jsonResponse['ip_address']
            malware=jsonResponse['malware']
            phishing=jsonResponse['phishing']
            age=jsonResponse['domain_age']
            category=jsonResponse['category']
            rank=jsonResponse['domain_rank']
            score=jsonResponse['risk_score']
            #scam(urls=url,category=category,domain=domain).save()
            return render(request,'check.html',{'domain':domain,'ip':ipaddress,'phishing':phishing,'age':age,'category':category,'rank':rank,'score':score,'malware':malware})

         else:
          print('inside else')
          return render(request,'home.html')
      
      
def url(request):
    if request.method=='POST':
        aurl=request.POST.get('aurl')
        malurl=request.POST.get('malurl')
        Check(aurl=aurl,malurl=malurl).save()
        return render(request,'home.html')
    else:
        return render(request,'url.html')
    
    
from django.shortcuts import render, redirect
from .forms import FormDataForm
from .models import FormData

def form_view(request):
    if request.method == 'POST':
        form = FormDataForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('prediction_result', pk=form.instance.pk)
    else:
        form = FormDataForm()
    return render(request, 'form_template.html', {'form': form})


    

from django.shortcuts import render
import requests

API_URL = "https://api-inference.huggingface.co/models/elftsdmr/malware-url-detect"
HEADERS = {"Authorization": "Bearer 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"}

def check_malware(request):
    if request.method == 'POST':
        url = request.POST.get('url')
        if url:
            payload = {"inputs": url}
            response = requests.post(API_URL, headers=HEADERS, json=payload)
            result = response.json()

            # Ensure that the response is a nested list and handle accordingly
            if isinstance(result, list) and result:
                # Extract the first item in the nested list (assuming there's only one prediction)
                predictions = result[0]  # Get the list of predictions for the input URL
                
                # Initialize variables to capture malware score
                malware_score = None
                
                # Iterate through predictions to find MALWARE label with the highest score
                for prediction in predictions:
                    if isinstance(prediction, dict) and 'label' in prediction and 'score' in prediction:
                        if prediction['label'] == 'MALWARE':
                            if malware_score is None or prediction['score'] > malware_score:
                                malware_score = prediction['score']
                
                if malware_score is not None:
                    # Convert malware score to percentage
                    malware_percentage = round(malware_score * 100, 2)
                    return render(request, 'url.html', {'url': url, 'malware_percentage': malware_percentage})
                else:
                    error_message = 'No malware label found in the result.'
                    return render(request, 'url.html', {'url': url, 'error_message': error_message})
            else:
                error_message = 'Unexpected API response format or empty result.'
                return render(request, 'url.html', {'url': url, 'error_message': error_message})
    
    return render(request, 'url.html')

